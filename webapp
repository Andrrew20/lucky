

### `requirements.txt`
```
flask==2.3.2
psycopg2-binary==2.9.6
tomli==2.0.1
```

### `app.py`
from flask import Flask, jsonify, render_template
import tomli as tomllib
import psycopg2
import time

app = Flask(__name__)

with open('config.toml', 'rb') as f:
    config = tomllib.load(f)
db_config = config['database']

def db_health():
    try:
        conn = psycopg2.connect(
            database=db_config['database'],
            user=db_config['user'],
            password=db_config['password'],
            host=db_config['host'],
            port=db_config['port']
        )
        conn.close()
        return True
    except:
        return False

@app.route('/status')
def status():
    return jsonify({
        'status': 'ok',
        'db_connected': db_health(),
        'timestamp': time.time()
    })

@app.route('/')
def home():
    return render_template('index.html')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=config['server']['port'])
```

### `Dockerfile`
FROM python:3.9-slim

WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY . .

EXPOSE 5000
CMD ["python3", "app.py"]
```

### `config.toml`
[database]
host = "postgres"
port = "5432"
user = "webuser"
password = "secret"
database = "webappdb"

[server]
host = '0.0.0.0'
port = '5000'
```

### Инициализация Postgres (`init.sql`)
CREATE USER webuser WITH PASSWORD 'secret';
CREATE DATABASE webappdb;
GRANT ALL PRIVILEGES ON DATABASE webappdb TO webuser;
```

### `locustfile.py`
from locust import HttpUser, task

class User(HttpUser):
    @task
    def hello(self):
        self.client.get("/")
    
    @task
    def status(self):
        self.client.get("/status")
```

### `haproxy.cfg`
global
    daemon
    maxconn 256

defaults
    mode http
    timeout connect 5000ms
    timeout client 5000ms
    timeout server 5000ms

resolvers docker
    nameserver dns1 127.0.0.11:53
    timeout resolve 2s
    timeout retry 2s

frontend http-in
    #option httpchk GET /
    bind *:80
    default_backend webapp-servers

backend webapp-servers
    balance roundrobin
    server-template webapp 2 webapp:5000 check resolvers docker init-addr libc,none
```

### `docker-compose.yml`
version: '3.8'

services:
  postgres:
    image: postgres:13
    container_name: postgres
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_PASSWORD: secret
      POSTGRES_USER: webuser
      POSTGRES_DB: webappdb
    networks:
      - private-net
    restart: unless-stopped

  webapp:
    build: ./webapp
    ports:
      - "5000:5000"
    environment:
      - TARGET_CPU=30
    networks:
      - private-net
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          cpus: '0.65'
    restart: unless-stopped

  haproxy:
    image: haproxy:2.4
    ports:
      - "80:80"
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    networks:
      - public-net
      - private-net
    depends_on:
      - webapp
    restart: unless-stopped

  locust:
    image: locustio/locust
    ports:
      - "8089:8089"
    volumes:
      - ./locust/locustfile.py:/locust/locustfile.py
    command: -f /locust/locustfile.py --host http://haproxy
    networks:
      - public-net
    restart: unless-stopped

networks:
  public-net:
    driver: bridge
  private-net:
    driver: bridge
    internal: true

volumes:
  pg_data:
```

### Bash-скрипт для автоскейлинга (`autoscale.sh`)
#!/bin/bash
TARGET_CPU=${TARGET_CPU:-30}
SERVICE_NAME=${SERVICE_NAME:-webapp_webapp}
MIN_INSTANCES=1
MAX_INSTANCES=2
COOLDOWN=120

while true; do
  CPU=$(docker stats --no-stream --format "{{.CPUPerc}}" $(docker ps -q --filter name=$SERVICE_NAME) | sed 's/%//')
  CURRENT_REPLICAS=$(docker-compose ps -q webapp | wc -l)
  
  # Сравнение через awk
  if (( $(awk -v cpu="$CPU" -v target="$TARGET_CPU" 'BEGIN {print (cpu > target)}') )); then
    if [ $CURRENT_REPLICAS -lt $MAX_INSTANCES ]; then
      echo "CPU ${CPU}% > ${TARGET_CPU}%. Scaling up to $((CURRENT_REPLICAS + 1))"
      docker-compose up-d --scale webapp=$((CURRENT_REPLICAS + 1)) --no-recreate sleep 
     $COOLDOWN
    fi
  else
    if [ $CURRENT_REPLICAS -gt $MIN_INSTANCES ]; then
      echo "CPU ${CPU}% < ${TARGET_CPU}%. Scaling down to $((CURRENT_REPLICAS - 1))"
      docker-compose up-d --scale webapp=$((CURRENT_REPLICAS - 1)) --no-recreate
      sleep $COOLDOWN
    fi
  fi
  sleep 10
done
```
